buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "com.discord4j:discord4j-core:3.2.1"
	}
}

import discord4j.common.util.Snowflake
import discord4j.core.DiscordClient
import discord4j.core.event.domain.lifecycle.ReadyEvent
import discord4j.core.object.entity.channel.MessageChannel
import discord4j.core.spec.MessageCreateFields
import reactor.core.publisher.Mono

import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

def splitFile(String name, byte[] file, int maxSize=8192) {
	int parts = (int) Math.ceil((float) file.size() / (1024 * maxSize))
	ByteArrayInputStream[] sections = new ByteArrayInputStream[parts]
	printf("Parts: %s\n", parts)
	for (int i = 0; i < parts; i++) {
		int k = i*maxSize*1024
		byte[] partFile
		if (i == (parts - 1)) {
			partFile = new byte[file.size() - k]
		} else {
			partFile = new byte[maxSize*1024]
		}
		for (int j = 0; j < partFile.size(); j++) {
			partFile[j] = file[k + j]
		}
		printf("Part %s, Size %s\n", i, partFile.size())
		sections[i] = new ByteArrayInputStream(partFile)
	}
	return sections
}
task publishToDiscord() {
	doFirst {
		ByteArrayOutputStream baOS = new ByteArrayOutputStream()
		ZipOutputStream zOS = new ZipOutputStream(baOS)
		fileTree("../build/libs").each {
			zOS.putNextEntry(new ZipEntry(it.name))
			zOS.write(it.readBytes())
		}
		zOS.close()
		def name = "binaries-${System.getenv("BUILD_NUMBER")}"

		println("Reading file...")
		def sections = splitFile(name, baOS.toByteArray())

		def githubRef = System.getenv("GITHUB_REF")
		println(githubRef)
		final def token = System.getenv("DISCORD_TOKEN")
		final def client = DiscordClient.create(token)
		final def channelId = Long.parseLong(System.getenv("CHANNEL_ID"))
		println("ChannelId: $channelId")
		def login = client.withGateway { gateway ->
			gateway.on(ReadyEvent.class, { event ->
				def self = event.getSelf()
				printf("Logged in as %s#%s%n", self.getUsername(), self.getDiscriminator())

				println("Sending...")
				def channel = (gateway.getChannelById(Snowflake.of(channelId)).block() as MessageChannel)
				println(channel.getType())
				Mono prev = null
				for (int i = 0; i < sections.size(); i++) {

					def content = "Forge Essentials build for Ref\\: `$githubRef` part ${i+1}"
					println(content)
					Mono cur = channel.createMessage()
							.withContent(content)
							.withFiles(MessageCreateFields.File.of(name + ".zip.${String.format("%03d", i+1)}", sections[i]))

					if (prev != null) {
						prev = prev.then().and(cur)
					} else {
						prev = cur
					}
				}
				return prev
			}).then()
		}
		login.doOnError({ error ->
			println("Error sending Message")
		}).subscribe().wait()
		println("Message Sent")
	}
}
